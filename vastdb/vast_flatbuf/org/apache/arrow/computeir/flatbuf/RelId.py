# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# An identifier for relations in a query.
#
# A table is used here to allow plan implementations optionality.
class RelId(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RelId()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRelId(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RelId
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RelId
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(1)
def RelIdStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, id): builder.PrependUint64Slot(0, id, 0)
def RelIdAddId(builder, id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, id)
def End(builder): return builder.EndObject()
def RelIdEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)